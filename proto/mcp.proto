syntax = "proto3";

package mcp;

option go_package = "github.com/user/mcp/pkg/api";
option java_package = "com.example.mcp.api";
option java_outer_classname = "McpProtos";

// MCP (Managed Command Platform) Service
// Secure gateway for executing commands and managing files
service McpService {
  // Health check for the service
  rpc Health(HealthRequest) returns (HealthResponse);
  
  // Execute a command in a sandbox
  rpc ExecuteCommand(CommandRequest) returns (TaskCreatedResponse);
  
  // Get the status of a task
  rpc GetTaskStatus(TaskStatusRequest) returns (TaskStatusResponse);
  
  // Stream the output of a task in real-time
  rpc StreamTaskOutput(TaskStatusRequest) returns (stream TaskOutputChunk);
  
  // Cancel a running task
  rpc CancelTask(TaskStatusRequest) returns (TaskStatusResponse);
  
  // Read a file
  rpc ReadFile(ReadFileRequest) returns (ReadFileResponse);
  // Write to a file
  rpc WriteFile(WriteFileRequest) returns (WriteFileResponse);
  // Delete a file
  rpc DeleteFile(DeleteFileRequest) returns (DeleteFileResponse);
}

// Health check request
message HealthRequest {}

// Health check response
message HealthResponse {
  // Service status
  string status = 1;
  // Version information
  string version = 2;
  // Uptime in seconds
  uint64 uptime_seconds = 3;
}

// Command execution request
message CommandRequest {
  // Command to execute
  string command = 1;
  // Command arguments
  repeated string args = 2;
  // Environment variables
  map<string, string> env = 3;
  // Working directory
  optional string cwd = 4;
  // Timeout in seconds
  uint32 timeout = 5;
  // Task metadata
  map<string, string> metadata = 6;
  // Sandbox configuration
  SandboxConfig sandbox_config = 7;
}

// Sandbox configuration
message SandboxConfig {
  // Whether sandbox is enabled
  bool enabled = 1;
  // Network access configuration
  NetworkAccess network_access = 2;
  // Resource limits
  ResourceLimits resource_limits = 3;
  // Paths with read-write permission
  repeated string rw_paths = 4;
  // Paths with read-only permission
  repeated string ro_paths = 5;
  // Denied paths
  repeated string denied_paths = 6;
}

// Network access configuration
enum NetworkAccess {
  // No network access allowed
  NETWORK_NONE = 0;
  // Access to the same network as the host
  NETWORK_HOST = 1;
  // Access only to specific hosts
  NETWORK_RESTRICTED = 2;
}

// Resource limits
message ResourceLimits {
  // CPU limit (cores)
  float cpu_limit = 1;
  // Memory limit (bytes)
  uint64 memory_limit = 2;
  // Process count limit
  uint32 pids_limit = 3;
  // IO weight (priority)
  uint32 io_weight = 4;
}

// Task creation response
message TaskCreatedResponse {
  // Task ID
  string task_id = 1;
  // Task status
  TaskStatus status = 2;
  // Task creation time (ISO 8601 format)
  string created_at = 3;
}

// Task status request
message TaskStatusRequest {
  // Task ID
  string task_id = 1;
}

// Task status response
message TaskStatusResponse {
  // Task information
  TaskInfo task_info = 1;
  // Result (if completed)
  optional TaskResult result = 2;
}

// Task information
message TaskInfo {
  // Task ID
  string task_id = 1;
  // Task type
  TaskType task_type = 2;
  // Task status
  TaskStatus status = 3;
  // Task creation time (ISO 8601 format)
  string created_at = 4;
  // Task start time (ISO 8601 format)
  optional string started_at = 5;
  // Task completion time (ISO 8601 format)
  optional string completed_at = 6;
  // Task metadata
  map<string, string> metadata = 7;
}

// Task result
message TaskResult {
  // Exit code
  int32 exit_code = 1;
  // Standard output
  string stdout = 2;
  // Standard error output
  string stderr = 3;
  // Resource usage
  ResourceUsage resource_usage = 4;
  // Execution time (milliseconds)
  uint64 execution_time_ms = 5;
}

// Resource usage
message ResourceUsage {
  // CPU usage time (milliseconds)
  uint64 cpu_time_ms = 1;
  // Maximum memory usage (kilobytes)
  uint64 max_memory_kb = 2;
  // Number of bytes read
  uint64 io_read_bytes = 3;
  // Number of bytes written
  uint64 io_write_bytes = 4;
}

// Task output chunk
message TaskOutputChunk {
  // Task ID
  string task_id = 1;
  // Chunk type
  OutputChunkType type = 2;
  // Chunk data
  bytes data = 3;
  // Timestamp (milliseconds)
  uint64 timestamp_ms = 4;
}

// Task status
enum TaskStatus {
  // Task created
  TASK_CREATED = 0;
  // Task queued
  TASK_QUEUED = 1;
  // Task running
  TASK_RUNNING = 2;
  // Task completed
  TASK_COMPLETED = 3;
  // Task failed
  TASK_FAILED = 4;
  // Task cancelled
  TASK_CANCELLED = 5;
  // Task timed out
  TASK_TIMED_OUT = 6;
}

// Task type
enum TaskType {
  // Command execution task
  TASK_COMMAND = 0;
  // File operation task
  TASK_FILE = 1;
  // HTTP request task
  TASK_HTTP_REQUEST = 2;
}

// Output chunk type
enum OutputChunkType {
  // Standard output
  CHUNK_STDOUT = 0;
  // Standard error output
  CHUNK_STDERR = 1;
  // Exit code
  CHUNK_EXIT_CODE = 2;
  // Event
  CHUNK_EVENT = 3;
}

// File read request
message ReadFileRequest {
  // File path
  string path = 1;
}

// File read response
message ReadFileResponse {
  // File path
  string path = 1;
  // File content
  bytes content = 2;
  // MIME type
  string mime_type = 3;
  // Error message (if any)
  optional string error = 4;
}

// File write request
message WriteFileRequest {
  // File path
  string path = 1;
  // File content
  bytes content = 2;
  // Whether to create parent directories if they don't exist
  bool create_dirs = 3;
  // File mode (permissions, octal format)
  uint32 mode = 4;
}

// File write response
message WriteFileResponse {
  // File path
  string path = 1;
  // Number of bytes written
  uint64 bytes_written = 2;
  // Error message (if any)
  optional string error = 3;
}

// File delete request
message DeleteFileRequest {
  // File path
  string path = 1;
  // Whether to recursively delete directories
  bool recursive = 2;
}

// File delete response
message DeleteFileResponse {
  // File path
  string path = 1;
  // Whether the deletion was successful
  bool success = 2;
  // Error message (if any)
  optional string error = 3;
} 