// This file is @generated by prost-build.
/// Health check request
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct HealthRequest {}
/// Health check response
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct HealthResponse {
    /// Service status
    #[prost(string, tag = "1")]
    pub status: ::prost::alloc::string::String,
    /// Version information
    #[prost(string, tag = "2")]
    pub version: ::prost::alloc::string::String,
    /// Uptime in seconds
    #[prost(uint64, tag = "3")]
    pub uptime_seconds: u64,
}
/// Command execution request
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct CommandRequest {
    /// Command to execute
    #[prost(string, tag = "1")]
    pub command: ::prost::alloc::string::String,
    /// Command arguments
    #[prost(string, repeated, tag = "2")]
    pub args: ::prost::alloc::vec::Vec<::prost::alloc::string::String>,
    /// Environment variables
    #[prost(map = "string, string", tag = "3")]
    pub env: ::std::collections::HashMap<
        ::prost::alloc::string::String,
        ::prost::alloc::string::String,
    >,
    /// Working directory
    #[prost(string, optional, tag = "4")]
    pub cwd: ::core::option::Option<::prost::alloc::string::String>,
    /// Timeout in seconds
    #[prost(uint32, tag = "5")]
    pub timeout: u32,
    /// Task metadata
    #[prost(map = "string, string", tag = "6")]
    pub metadata: ::std::collections::HashMap<
        ::prost::alloc::string::String,
        ::prost::alloc::string::String,
    >,
    /// Sandbox configuration
    #[prost(message, optional, tag = "7")]
    pub sandbox_config: ::core::option::Option<SandboxConfig>,
}
/// Sandbox configuration
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct SandboxConfig {
    /// Whether sandbox is enabled
    #[prost(bool, tag = "1")]
    pub enabled: bool,
    /// Network access configuration
    #[prost(enumeration = "NetworkAccess", tag = "2")]
    pub network_access: i32,
    /// Resource limits
    #[prost(message, optional, tag = "3")]
    pub resource_limits: ::core::option::Option<ResourceLimits>,
    /// Paths with read-write permission
    #[prost(string, repeated, tag = "4")]
    pub rw_paths: ::prost::alloc::vec::Vec<::prost::alloc::string::String>,
    /// Paths with read-only permission
    #[prost(string, repeated, tag = "5")]
    pub ro_paths: ::prost::alloc::vec::Vec<::prost::alloc::string::String>,
    /// Denied paths
    #[prost(string, repeated, tag = "6")]
    pub denied_paths: ::prost::alloc::vec::Vec<::prost::alloc::string::String>,
}
/// Resource limits
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ResourceLimits {
    /// CPU limit (cores)
    #[prost(float, tag = "1")]
    pub cpu_limit: f32,
    /// Memory limit (bytes)
    #[prost(uint64, tag = "2")]
    pub memory_limit: u64,
    /// Process count limit
    #[prost(uint32, tag = "3")]
    pub pids_limit: u32,
    /// IO weight (priority)
    #[prost(uint32, tag = "4")]
    pub io_weight: u32,
}
/// Task creation response
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct TaskCreatedResponse {
    /// Task ID
    #[prost(string, tag = "1")]
    pub task_id: ::prost::alloc::string::String,
    /// Task status
    #[prost(enumeration = "TaskStatus", tag = "2")]
    pub status: i32,
    /// Task creation time (ISO 8601 format)
    #[prost(string, tag = "3")]
    pub created_at: ::prost::alloc::string::String,
}
/// Task status request
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct TaskStatusRequest {
    /// Task ID
    #[prost(string, tag = "1")]
    pub task_id: ::prost::alloc::string::String,
}
/// Task status response
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct TaskStatusResponse {
    /// Task information
    #[prost(message, optional, tag = "1")]
    pub task_info: ::core::option::Option<TaskInfo>,
    /// Result (if completed)
    #[prost(message, optional, tag = "2")]
    pub result: ::core::option::Option<TaskResult>,
}
/// Task information
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct TaskInfo {
    /// Task ID
    #[prost(string, tag = "1")]
    pub task_id: ::prost::alloc::string::String,
    /// Task type
    #[prost(enumeration = "TaskType", tag = "2")]
    pub task_type: i32,
    /// Task status
    #[prost(enumeration = "TaskStatus", tag = "3")]
    pub status: i32,
    /// Task creation time (ISO 8601 format)
    #[prost(string, tag = "4")]
    pub created_at: ::prost::alloc::string::String,
    /// Task start time (ISO 8601 format)
    #[prost(string, optional, tag = "5")]
    pub started_at: ::core::option::Option<::prost::alloc::string::String>,
    /// Task completion time (ISO 8601 format)
    #[prost(string, optional, tag = "6")]
    pub completed_at: ::core::option::Option<::prost::alloc::string::String>,
    /// Task metadata
    #[prost(map = "string, string", tag = "7")]
    pub metadata: ::std::collections::HashMap<
        ::prost::alloc::string::String,
        ::prost::alloc::string::String,
    >,
}
/// Task result
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct TaskResult {
    /// Exit code
    #[prost(int32, tag = "1")]
    pub exit_code: i32,
    /// Standard output
    #[prost(string, tag = "2")]
    pub stdout: ::prost::alloc::string::String,
    /// Standard error output
    #[prost(string, tag = "3")]
    pub stderr: ::prost::alloc::string::String,
    /// Resource usage
    #[prost(message, optional, tag = "4")]
    pub resource_usage: ::core::option::Option<ResourceUsage>,
    /// Execution time (milliseconds)
    #[prost(uint64, tag = "5")]
    pub execution_time_ms: u64,
}
/// Resource usage
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ResourceUsage {
    /// CPU usage time (milliseconds)
    #[prost(uint64, tag = "1")]
    pub cpu_time_ms: u64,
    /// Maximum memory usage (kilobytes)
    #[prost(uint64, tag = "2")]
    pub max_memory_kb: u64,
    /// Number of bytes read
    #[prost(uint64, tag = "3")]
    pub io_read_bytes: u64,
    /// Number of bytes written
    #[prost(uint64, tag = "4")]
    pub io_write_bytes: u64,
}
/// Task output chunk
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct TaskOutputChunk {
    /// Task ID
    #[prost(string, tag = "1")]
    pub task_id: ::prost::alloc::string::String,
    /// Chunk type
    #[prost(enumeration = "OutputChunkType", tag = "2")]
    pub r#type: i32,
    /// Chunk data
    #[prost(bytes = "vec", tag = "3")]
    pub data: ::prost::alloc::vec::Vec<u8>,
    /// Timestamp (milliseconds)
    #[prost(uint64, tag = "4")]
    pub timestamp_ms: u64,
}
/// File read request
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ReadFileRequest {
    /// File path
    #[prost(string, tag = "1")]
    pub path: ::prost::alloc::string::String,
}
/// File read response
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ReadFileResponse {
    /// File path
    #[prost(string, tag = "1")]
    pub path: ::prost::alloc::string::String,
    /// File content
    #[prost(bytes = "vec", tag = "2")]
    pub content: ::prost::alloc::vec::Vec<u8>,
    /// MIME type
    #[prost(string, tag = "3")]
    pub mime_type: ::prost::alloc::string::String,
    /// Error message (if any)
    #[prost(string, optional, tag = "4")]
    pub error: ::core::option::Option<::prost::alloc::string::String>,
}
/// File write request
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct WriteFileRequest {
    /// File path
    #[prost(string, tag = "1")]
    pub path: ::prost::alloc::string::String,
    /// File content
    #[prost(bytes = "vec", tag = "2")]
    pub content: ::prost::alloc::vec::Vec<u8>,
    /// Whether to create parent directories if they don't exist
    #[prost(bool, tag = "3")]
    pub create_dirs: bool,
    /// File mode (permissions, octal format)
    #[prost(uint32, tag = "4")]
    pub mode: u32,
}
/// File write response
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct WriteFileResponse {
    /// File path
    #[prost(string, tag = "1")]
    pub path: ::prost::alloc::string::String,
    /// Number of bytes written
    #[prost(uint64, tag = "2")]
    pub bytes_written: u64,
    /// Error message (if any)
    #[prost(string, optional, tag = "3")]
    pub error: ::core::option::Option<::prost::alloc::string::String>,
}
/// File delete request
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct DeleteFileRequest {
    /// File path
    #[prost(string, tag = "1")]
    pub path: ::prost::alloc::string::String,
    /// Whether to recursively delete directories
    #[prost(bool, tag = "2")]
    pub recursive: bool,
}
/// File delete response
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct DeleteFileResponse {
    /// File path
    #[prost(string, tag = "1")]
    pub path: ::prost::alloc::string::String,
    /// Whether the deletion was successful
    #[prost(bool, tag = "2")]
    pub success: bool,
    /// Error message (if any)
    #[prost(string, optional, tag = "3")]
    pub error: ::core::option::Option<::prost::alloc::string::String>,
}
/// Network access configuration
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum NetworkAccess {
    /// No network access allowed
    NetworkNone = 0,
    /// Access to the same network as the host
    NetworkHost = 1,
    /// Access only to specific hosts
    NetworkRestricted = 2,
}
impl NetworkAccess {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            NetworkAccess::NetworkNone => "NETWORK_NONE",
            NetworkAccess::NetworkHost => "NETWORK_HOST",
            NetworkAccess::NetworkRestricted => "NETWORK_RESTRICTED",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "NETWORK_NONE" => Some(Self::NetworkNone),
            "NETWORK_HOST" => Some(Self::NetworkHost),
            "NETWORK_RESTRICTED" => Some(Self::NetworkRestricted),
            _ => None,
        }
    }
}
/// Task status
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum TaskStatus {
    /// Task created
    TaskCreated = 0,
    /// Task queued
    TaskQueued = 1,
    /// Task running
    TaskRunning = 2,
    /// Task completed
    TaskCompleted = 3,
    /// Task failed
    TaskFailed = 4,
    /// Task cancelled
    TaskCancelled = 5,
    /// Task timed out
    TaskTimedOut = 6,
}
impl TaskStatus {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            TaskStatus::TaskCreated => "TASK_CREATED",
            TaskStatus::TaskQueued => "TASK_QUEUED",
            TaskStatus::TaskRunning => "TASK_RUNNING",
            TaskStatus::TaskCompleted => "TASK_COMPLETED",
            TaskStatus::TaskFailed => "TASK_FAILED",
            TaskStatus::TaskCancelled => "TASK_CANCELLED",
            TaskStatus::TaskTimedOut => "TASK_TIMED_OUT",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "TASK_CREATED" => Some(Self::TaskCreated),
            "TASK_QUEUED" => Some(Self::TaskQueued),
            "TASK_RUNNING" => Some(Self::TaskRunning),
            "TASK_COMPLETED" => Some(Self::TaskCompleted),
            "TASK_FAILED" => Some(Self::TaskFailed),
            "TASK_CANCELLED" => Some(Self::TaskCancelled),
            "TASK_TIMED_OUT" => Some(Self::TaskTimedOut),
            _ => None,
        }
    }
}
/// Task type
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum TaskType {
    /// Command execution task
    TaskCommand = 0,
    /// File operation task
    TaskFile = 1,
    /// HTTP request task
    TaskHttpRequest = 2,
}
impl TaskType {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            TaskType::TaskCommand => "TASK_COMMAND",
            TaskType::TaskFile => "TASK_FILE",
            TaskType::TaskHttpRequest => "TASK_HTTP_REQUEST",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "TASK_COMMAND" => Some(Self::TaskCommand),
            "TASK_FILE" => Some(Self::TaskFile),
            "TASK_HTTP_REQUEST" => Some(Self::TaskHttpRequest),
            _ => None,
        }
    }
}
/// Output chunk type
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum OutputChunkType {
    /// Standard output
    ChunkStdout = 0,
    /// Standard error output
    ChunkStderr = 1,
    /// Exit code
    ChunkExitCode = 2,
    /// Event
    ChunkEvent = 3,
}
impl OutputChunkType {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            OutputChunkType::ChunkStdout => "CHUNK_STDOUT",
            OutputChunkType::ChunkStderr => "CHUNK_STDERR",
            OutputChunkType::ChunkExitCode => "CHUNK_EXIT_CODE",
            OutputChunkType::ChunkEvent => "CHUNK_EVENT",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "CHUNK_STDOUT" => Some(Self::ChunkStdout),
            "CHUNK_STDERR" => Some(Self::ChunkStderr),
            "CHUNK_EXIT_CODE" => Some(Self::ChunkExitCode),
            "CHUNK_EVENT" => Some(Self::ChunkEvent),
            _ => None,
        }
    }
}
/// Generated client implementations.
pub mod mcp_service_client {
    #![allow(unused_variables, dead_code, missing_docs, clippy::let_unit_value)]
    use tonic::codegen::*;
    use tonic::codegen::http::Uri;
    /// MCP (Managed Command Platform) Service
    /// Secure gateway for executing commands and managing files
    #[derive(Debug, Clone)]
    pub struct McpServiceClient<T> {
        inner: tonic::client::Grpc<T>,
    }
    impl McpServiceClient<tonic::transport::Channel> {
        /// Attempt to create a new client by connecting to a given endpoint.
        pub async fn connect<D>(dst: D) -> Result<Self, tonic::transport::Error>
        where
            D: TryInto<tonic::transport::Endpoint>,
            D::Error: Into<StdError>,
        {
            let conn = tonic::transport::Endpoint::new(dst)?.connect().await?;
            Ok(Self::new(conn))
        }
    }
    impl<T> McpServiceClient<T>
    where
        T: tonic::client::GrpcService<tonic::body::BoxBody>,
        T::Error: Into<StdError>,
        T::ResponseBody: Body<Data = Bytes> + Send + 'static,
        <T::ResponseBody as Body>::Error: Into<StdError> + Send,
    {
        pub fn new(inner: T) -> Self {
            let inner = tonic::client::Grpc::new(inner);
            Self { inner }
        }
        pub fn with_origin(inner: T, origin: Uri) -> Self {
            let inner = tonic::client::Grpc::with_origin(inner, origin);
            Self { inner }
        }
        pub fn with_interceptor<F>(
            inner: T,
            interceptor: F,
        ) -> McpServiceClient<InterceptedService<T, F>>
        where
            F: tonic::service::Interceptor,
            T::ResponseBody: Default,
            T: tonic::codegen::Service<
                http::Request<tonic::body::BoxBody>,
                Response = http::Response<
                    <T as tonic::client::GrpcService<tonic::body::BoxBody>>::ResponseBody,
                >,
            >,
            <T as tonic::codegen::Service<
                http::Request<tonic::body::BoxBody>,
            >>::Error: Into<StdError> + Send + Sync,
        {
            McpServiceClient::new(InterceptedService::new(inner, interceptor))
        }
        /// Compress requests with the given encoding.
        ///
        /// This requires the server to support it otherwise it might respond with an
        /// error.
        #[must_use]
        pub fn send_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.inner = self.inner.send_compressed(encoding);
            self
        }
        /// Enable decompressing responses.
        #[must_use]
        pub fn accept_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.inner = self.inner.accept_compressed(encoding);
            self
        }
        /// Limits the maximum size of a decoded message.
        ///
        /// Default: `4MB`
        #[must_use]
        pub fn max_decoding_message_size(mut self, limit: usize) -> Self {
            self.inner = self.inner.max_decoding_message_size(limit);
            self
        }
        /// Limits the maximum size of an encoded message.
        ///
        /// Default: `usize::MAX`
        #[must_use]
        pub fn max_encoding_message_size(mut self, limit: usize) -> Self {
            self.inner = self.inner.max_encoding_message_size(limit);
            self
        }
        /// Health check for the service
        pub async fn health(
            &mut self,
            request: impl tonic::IntoRequest<super::HealthRequest>,
        ) -> std::result::Result<tonic::Response<super::HealthResponse>, tonic::Status> {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::new(
                        tonic::Code::Unknown,
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static("/mcp.McpService/Health");
            let mut req = request.into_request();
            req.extensions_mut().insert(GrpcMethod::new("mcp.McpService", "Health"));
            self.inner.unary(req, path, codec).await
        }
        /// Execute a command in a sandbox
        pub async fn execute_command(
            &mut self,
            request: impl tonic::IntoRequest<super::CommandRequest>,
        ) -> std::result::Result<
            tonic::Response<super::TaskCreatedResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::new(
                        tonic::Code::Unknown,
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/mcp.McpService/ExecuteCommand",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(GrpcMethod::new("mcp.McpService", "ExecuteCommand"));
            self.inner.unary(req, path, codec).await
        }
        /// Get the status of a task
        pub async fn get_task_status(
            &mut self,
            request: impl tonic::IntoRequest<super::TaskStatusRequest>,
        ) -> std::result::Result<
            tonic::Response<super::TaskStatusResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::new(
                        tonic::Code::Unknown,
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/mcp.McpService/GetTaskStatus",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(GrpcMethod::new("mcp.McpService", "GetTaskStatus"));
            self.inner.unary(req, path, codec).await
        }
        /// Stream the output of a task in real-time
        pub async fn stream_task_output(
            &mut self,
            request: impl tonic::IntoRequest<super::TaskStatusRequest>,
        ) -> std::result::Result<
            tonic::Response<tonic::codec::Streaming<super::TaskOutputChunk>>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::new(
                        tonic::Code::Unknown,
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/mcp.McpService/StreamTaskOutput",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(GrpcMethod::new("mcp.McpService", "StreamTaskOutput"));
            self.inner.server_streaming(req, path, codec).await
        }
        /// Cancel a running task
        pub async fn cancel_task(
            &mut self,
            request: impl tonic::IntoRequest<super::TaskStatusRequest>,
        ) -> std::result::Result<
            tonic::Response<super::TaskStatusResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::new(
                        tonic::Code::Unknown,
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/mcp.McpService/CancelTask",
            );
            let mut req = request.into_request();
            req.extensions_mut().insert(GrpcMethod::new("mcp.McpService", "CancelTask"));
            self.inner.unary(req, path, codec).await
        }
        /// Read a file
        pub async fn read_file(
            &mut self,
            request: impl tonic::IntoRequest<super::ReadFileRequest>,
        ) -> std::result::Result<
            tonic::Response<super::ReadFileResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::new(
                        tonic::Code::Unknown,
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static("/mcp.McpService/ReadFile");
            let mut req = request.into_request();
            req.extensions_mut().insert(GrpcMethod::new("mcp.McpService", "ReadFile"));
            self.inner.unary(req, path, codec).await
        }
        /// Write to a file
        pub async fn write_file(
            &mut self,
            request: impl tonic::IntoRequest<super::WriteFileRequest>,
        ) -> std::result::Result<
            tonic::Response<super::WriteFileResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::new(
                        tonic::Code::Unknown,
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static("/mcp.McpService/WriteFile");
            let mut req = request.into_request();
            req.extensions_mut().insert(GrpcMethod::new("mcp.McpService", "WriteFile"));
            self.inner.unary(req, path, codec).await
        }
        /// Delete a file
        pub async fn delete_file(
            &mut self,
            request: impl tonic::IntoRequest<super::DeleteFileRequest>,
        ) -> std::result::Result<
            tonic::Response<super::DeleteFileResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::new(
                        tonic::Code::Unknown,
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/mcp.McpService/DeleteFile",
            );
            let mut req = request.into_request();
            req.extensions_mut().insert(GrpcMethod::new("mcp.McpService", "DeleteFile"));
            self.inner.unary(req, path, codec).await
        }
    }
}
/// Generated server implementations.
pub mod mcp_service_server {
    #![allow(unused_variables, dead_code, missing_docs, clippy::let_unit_value)]
    use tonic::codegen::*;
    /// Generated trait containing gRPC methods that should be implemented for use with McpServiceServer.
    #[async_trait]
    pub trait McpService: Send + Sync + 'static {
        /// Health check for the service
        async fn health(
            &self,
            request: tonic::Request<super::HealthRequest>,
        ) -> std::result::Result<tonic::Response<super::HealthResponse>, tonic::Status>;
        /// Execute a command in a sandbox
        async fn execute_command(
            &self,
            request: tonic::Request<super::CommandRequest>,
        ) -> std::result::Result<
            tonic::Response<super::TaskCreatedResponse>,
            tonic::Status,
        >;
        /// Get the status of a task
        async fn get_task_status(
            &self,
            request: tonic::Request<super::TaskStatusRequest>,
        ) -> std::result::Result<
            tonic::Response<super::TaskStatusResponse>,
            tonic::Status,
        >;
        /// Server streaming response type for the StreamTaskOutput method.
        type StreamTaskOutputStream: tonic::codegen::tokio_stream::Stream<
                Item = std::result::Result<super::TaskOutputChunk, tonic::Status>,
            >
            + Send
            + 'static;
        /// Stream the output of a task in real-time
        async fn stream_task_output(
            &self,
            request: tonic::Request<super::TaskStatusRequest>,
        ) -> std::result::Result<
            tonic::Response<Self::StreamTaskOutputStream>,
            tonic::Status,
        >;
        /// Cancel a running task
        async fn cancel_task(
            &self,
            request: tonic::Request<super::TaskStatusRequest>,
        ) -> std::result::Result<
            tonic::Response<super::TaskStatusResponse>,
            tonic::Status,
        >;
        /// Read a file
        async fn read_file(
            &self,
            request: tonic::Request<super::ReadFileRequest>,
        ) -> std::result::Result<
            tonic::Response<super::ReadFileResponse>,
            tonic::Status,
        >;
        /// Write to a file
        async fn write_file(
            &self,
            request: tonic::Request<super::WriteFileRequest>,
        ) -> std::result::Result<
            tonic::Response<super::WriteFileResponse>,
            tonic::Status,
        >;
        /// Delete a file
        async fn delete_file(
            &self,
            request: tonic::Request<super::DeleteFileRequest>,
        ) -> std::result::Result<
            tonic::Response<super::DeleteFileResponse>,
            tonic::Status,
        >;
    }
    /// MCP (Managed Command Platform) Service
    /// Secure gateway for executing commands and managing files
    #[derive(Debug)]
    pub struct McpServiceServer<T: McpService> {
        inner: _Inner<T>,
        accept_compression_encodings: EnabledCompressionEncodings,
        send_compression_encodings: EnabledCompressionEncodings,
        max_decoding_message_size: Option<usize>,
        max_encoding_message_size: Option<usize>,
    }
    struct _Inner<T>(Arc<T>);
    impl<T: McpService> McpServiceServer<T> {
        pub fn new(inner: T) -> Self {
            Self::from_arc(Arc::new(inner))
        }
        pub fn from_arc(inner: Arc<T>) -> Self {
            let inner = _Inner(inner);
            Self {
                inner,
                accept_compression_encodings: Default::default(),
                send_compression_encodings: Default::default(),
                max_decoding_message_size: None,
                max_encoding_message_size: None,
            }
        }
        pub fn with_interceptor<F>(
            inner: T,
            interceptor: F,
        ) -> InterceptedService<Self, F>
        where
            F: tonic::service::Interceptor,
        {
            InterceptedService::new(Self::new(inner), interceptor)
        }
        /// Enable decompressing requests with the given encoding.
        #[must_use]
        pub fn accept_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.accept_compression_encodings.enable(encoding);
            self
        }
        /// Compress responses with the given encoding, if the client supports it.
        #[must_use]
        pub fn send_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.send_compression_encodings.enable(encoding);
            self
        }
        /// Limits the maximum size of a decoded message.
        ///
        /// Default: `4MB`
        #[must_use]
        pub fn max_decoding_message_size(mut self, limit: usize) -> Self {
            self.max_decoding_message_size = Some(limit);
            self
        }
        /// Limits the maximum size of an encoded message.
        ///
        /// Default: `usize::MAX`
        #[must_use]
        pub fn max_encoding_message_size(mut self, limit: usize) -> Self {
            self.max_encoding_message_size = Some(limit);
            self
        }
    }
    impl<T, B> tonic::codegen::Service<http::Request<B>> for McpServiceServer<T>
    where
        T: McpService,
        B: Body + Send + 'static,
        B::Error: Into<StdError> + Send + 'static,
    {
        type Response = http::Response<tonic::body::BoxBody>;
        type Error = std::convert::Infallible;
        type Future = BoxFuture<Self::Response, Self::Error>;
        fn poll_ready(
            &mut self,
            _cx: &mut Context<'_>,
        ) -> Poll<std::result::Result<(), Self::Error>> {
            Poll::Ready(Ok(()))
        }
        fn call(&mut self, req: http::Request<B>) -> Self::Future {
            let inner = self.inner.clone();
            match req.uri().path() {
                "/mcp.McpService/Health" => {
                    #[allow(non_camel_case_types)]
                    struct HealthSvc<T: McpService>(pub Arc<T>);
                    impl<T: McpService> tonic::server::UnaryService<super::HealthRequest>
                    for HealthSvc<T> {
                        type Response = super::HealthResponse;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::HealthRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as McpService>::health(&inner, request).await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let inner = inner.0;
                        let method = HealthSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/mcp.McpService/ExecuteCommand" => {
                    #[allow(non_camel_case_types)]
                    struct ExecuteCommandSvc<T: McpService>(pub Arc<T>);
                    impl<
                        T: McpService,
                    > tonic::server::UnaryService<super::CommandRequest>
                    for ExecuteCommandSvc<T> {
                        type Response = super::TaskCreatedResponse;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::CommandRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as McpService>::execute_command(&inner, request).await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let inner = inner.0;
                        let method = ExecuteCommandSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/mcp.McpService/GetTaskStatus" => {
                    #[allow(non_camel_case_types)]
                    struct GetTaskStatusSvc<T: McpService>(pub Arc<T>);
                    impl<
                        T: McpService,
                    > tonic::server::UnaryService<super::TaskStatusRequest>
                    for GetTaskStatusSvc<T> {
                        type Response = super::TaskStatusResponse;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::TaskStatusRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as McpService>::get_task_status(&inner, request).await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let inner = inner.0;
                        let method = GetTaskStatusSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/mcp.McpService/StreamTaskOutput" => {
                    #[allow(non_camel_case_types)]
                    struct StreamTaskOutputSvc<T: McpService>(pub Arc<T>);
                    impl<
                        T: McpService,
                    > tonic::server::ServerStreamingService<super::TaskStatusRequest>
                    for StreamTaskOutputSvc<T> {
                        type Response = super::TaskOutputChunk;
                        type ResponseStream = T::StreamTaskOutputStream;
                        type Future = BoxFuture<
                            tonic::Response<Self::ResponseStream>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::TaskStatusRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as McpService>::stream_task_output(&inner, request).await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let inner = inner.0;
                        let method = StreamTaskOutputSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.server_streaming(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/mcp.McpService/CancelTask" => {
                    #[allow(non_camel_case_types)]
                    struct CancelTaskSvc<T: McpService>(pub Arc<T>);
                    impl<
                        T: McpService,
                    > tonic::server::UnaryService<super::TaskStatusRequest>
                    for CancelTaskSvc<T> {
                        type Response = super::TaskStatusResponse;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::TaskStatusRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as McpService>::cancel_task(&inner, request).await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let inner = inner.0;
                        let method = CancelTaskSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/mcp.McpService/ReadFile" => {
                    #[allow(non_camel_case_types)]
                    struct ReadFileSvc<T: McpService>(pub Arc<T>);
                    impl<
                        T: McpService,
                    > tonic::server::UnaryService<super::ReadFileRequest>
                    for ReadFileSvc<T> {
                        type Response = super::ReadFileResponse;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::ReadFileRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as McpService>::read_file(&inner, request).await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let inner = inner.0;
                        let method = ReadFileSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/mcp.McpService/WriteFile" => {
                    #[allow(non_camel_case_types)]
                    struct WriteFileSvc<T: McpService>(pub Arc<T>);
                    impl<
                        T: McpService,
                    > tonic::server::UnaryService<super::WriteFileRequest>
                    for WriteFileSvc<T> {
                        type Response = super::WriteFileResponse;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::WriteFileRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as McpService>::write_file(&inner, request).await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let inner = inner.0;
                        let method = WriteFileSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/mcp.McpService/DeleteFile" => {
                    #[allow(non_camel_case_types)]
                    struct DeleteFileSvc<T: McpService>(pub Arc<T>);
                    impl<
                        T: McpService,
                    > tonic::server::UnaryService<super::DeleteFileRequest>
                    for DeleteFileSvc<T> {
                        type Response = super::DeleteFileResponse;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::DeleteFileRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as McpService>::delete_file(&inner, request).await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let inner = inner.0;
                        let method = DeleteFileSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                _ => {
                    Box::pin(async move {
                        Ok(
                            http::Response::builder()
                                .status(200)
                                .header("grpc-status", "12")
                                .header("content-type", "application/grpc")
                                .body(empty_body())
                                .unwrap(),
                        )
                    })
                }
            }
        }
    }
    impl<T: McpService> Clone for McpServiceServer<T> {
        fn clone(&self) -> Self {
            let inner = self.inner.clone();
            Self {
                inner,
                accept_compression_encodings: self.accept_compression_encodings,
                send_compression_encodings: self.send_compression_encodings,
                max_decoding_message_size: self.max_decoding_message_size,
                max_encoding_message_size: self.max_encoding_message_size,
            }
        }
    }
    impl<T: McpService> Clone for _Inner<T> {
        fn clone(&self) -> Self {
            Self(Arc::clone(&self.0))
        }
    }
    impl<T: std::fmt::Debug> std::fmt::Debug for _Inner<T> {
        fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
            write!(f, "{:?}", self.0)
        }
    }
    impl<T: McpService> tonic::server::NamedService for McpServiceServer<T> {
        const NAME: &'static str = "mcp.McpService";
    }
}
